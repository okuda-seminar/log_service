// Code generated by MockGen. DO NOT EDIT.
// Source: internal/server/usecase/list_log.go

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	domain "log_service/internal/server/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIListLogsUseCase is a mock of IListLogsUseCase interface.
type MockIListLogsUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIListLogsUseCaseMockRecorder
}

// MockIListLogsUseCaseMockRecorder is the mock recorder for MockIListLogsUseCase.
type MockIListLogsUseCaseMockRecorder struct {
	mock *MockIListLogsUseCase
}

// NewMockIListLogsUseCase creates a new mock instance.
func NewMockIListLogsUseCase(ctrl *gomock.Controller) *MockIListLogsUseCase {
	mock := &MockIListLogsUseCase{ctrl: ctrl}
	mock.recorder = &MockIListLogsUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIListLogsUseCase) EXPECT() *MockIListLogsUseCaseMockRecorder {
	return m.recorder
}

// ListLogs mocks base method.
func (m *MockIListLogsUseCase) ListLogs(ctx context.Context) ([]*domain.Log, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogs", ctx)
	ret0, _ := ret[0].([]*domain.Log)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogs indicates an expected call of ListLogs.
func (mr *MockIListLogsUseCaseMockRecorder) ListLogs(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogs", reflect.TypeOf((*MockIListLogsUseCase)(nil).ListLogs), ctx)
}
