// Code generated by MockGen. DO NOT EDIT.
// Source: internal/server/usecase/insert_log.go
//
// Generated by this command:
//
//	mockgen -package usecase -source=internal/server/usecase/insert_log.go -destination=internal/server/usecase/insert_log_mock.go mockgen -package usecase -source=internal/server/usecase/list_log.go -destination=internal/server/usecase/list_log_mock.go
//

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIInsertLogUseCase is a mock of IInsertLogUseCase interface.
type MockIInsertLogUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIInsertLogUseCaseMockRecorder
	isgomock struct{}
}

// MockIInsertLogUseCaseMockRecorder is the mock recorder for MockIInsertLogUseCase.
type MockIInsertLogUseCaseMockRecorder struct {
	mock *MockIInsertLogUseCase
}

// NewMockIInsertLogUseCase creates a new mock instance.
func NewMockIInsertLogUseCase(ctrl *gomock.Controller) *MockIInsertLogUseCase {
	mock := &MockIInsertLogUseCase{ctrl: ctrl}
	mock.recorder = &MockIInsertLogUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIInsertLogUseCase) EXPECT() *MockIInsertLogUseCaseMockRecorder {
	return m.recorder
}

// InsertLog mocks base method.
func (m *MockIInsertLogUseCase) InsertLog(ctx context.Context, dto *InsertLogDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLog", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertLog indicates an expected call of InsertLog.
func (mr *MockIInsertLogUseCaseMockRecorder) InsertLog(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLog", reflect.TypeOf((*MockIInsertLogUseCase)(nil).InsertLog), ctx, dto)
}

// MockIInsertCTRLogUseCase is a mock of IInsertCTRLogUseCase interface.
type MockIInsertCTRLogUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIInsertCTRLogUseCaseMockRecorder
	isgomock struct{}
}

// MockIInsertCTRLogUseCaseMockRecorder is the mock recorder for MockIInsertCTRLogUseCase.
type MockIInsertCTRLogUseCaseMockRecorder struct {
	mock *MockIInsertCTRLogUseCase
}

// NewMockIInsertCTRLogUseCase creates a new mock instance.
func NewMockIInsertCTRLogUseCase(ctrl *gomock.Controller) *MockIInsertCTRLogUseCase {
	mock := &MockIInsertCTRLogUseCase{ctrl: ctrl}
	mock.recorder = &MockIInsertCTRLogUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIInsertCTRLogUseCase) EXPECT() *MockIInsertCTRLogUseCaseMockRecorder {
	return m.recorder
}

// InsertCTRLog mocks base method.
func (m *MockIInsertCTRLogUseCase) InsertCTRLog(ctx context.Context, dto *InsertCTRLogDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCTRLog", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertCTRLog indicates an expected call of InsertCTRLog.
func (mr *MockIInsertCTRLogUseCaseMockRecorder) InsertCTRLog(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCTRLog", reflect.TypeOf((*MockIInsertCTRLogUseCase)(nil).InsertCTRLog), ctx, dto)
}
