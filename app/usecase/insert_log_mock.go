// Code generated by MockGen. DO NOT EDIT.
// Source: app/usecase/insert_log.go
//
// Generated by this command:
//
//	mockgen -package usecase -source=app/usecase/insert_log.go -destination=app/usecase/insert_log_mock.go
//

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIInsertLogUseCase is a mock of IInsertLogUseCase interface.
type MockIInsertLogUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIInsertLogUseCaseMockRecorder
}

// MockIInsertLogUseCaseMockRecorder is the mock recorder for MockIInsertLogUseCase.
type MockIInsertLogUseCaseMockRecorder struct {
	mock *MockIInsertLogUseCase
}

// NewMockIInsertLogUseCase creates a new mock instance.
func NewMockIInsertLogUseCase(ctrl *gomock.Controller) *MockIInsertLogUseCase {
	mock := &MockIInsertLogUseCase{ctrl: ctrl}
	mock.recorder = &MockIInsertLogUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIInsertLogUseCase) EXPECT() *MockIInsertLogUseCaseMockRecorder {
	return m.recorder
}

// InsertLog mocks base method.
func (m *MockIInsertLogUseCase) InsertLog(ctx context.Context, dto *InsertLogDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLog", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertLog indicates an expected call of InsertLog.
func (mr *MockIInsertLogUseCaseMockRecorder) InsertLog(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLog", reflect.TypeOf((*MockIInsertLogUseCase)(nil).InsertLog), ctx, dto)
}
