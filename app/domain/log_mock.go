// Code generated by MockGen. DO NOT EDIT.
// Source: app/domain/log_repository.go
//
// Generated by this command:
//
//	mockgen -package domain -source=app/domain/log_repository.go -destination=app/domain/log_mock.go
//

// Package domain is a generated GoMock package.
package domain

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockILogRepository is a mock of ILogRepository interface.
type MockILogRepository struct {
	ctrl     *gomock.Controller
	recorder *MockILogRepositoryMockRecorder
}

// MockILogRepositoryMockRecorder is the mock recorder for MockILogRepository.
type MockILogRepositoryMockRecorder struct {
	mock *MockILogRepository
}

// NewMockILogRepository creates a new mock instance.
func NewMockILogRepository(ctrl *gomock.Controller) *MockILogRepository {
	mock := &MockILogRepository{ctrl: ctrl}
	mock.recorder = &MockILogRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILogRepository) EXPECT() *MockILogRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockILogRepository) Save(ctx context.Context, log *Log) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, log)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockILogRepositoryMockRecorder) Save(ctx, log any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockILogRepository)(nil).Save), ctx, log)
}
